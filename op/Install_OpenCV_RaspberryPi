Pi3b

用pi3b要安裝一個cv開發環境其實很不實際

一開始是熱當

當時區設定成 TW make 會出現 error (怪)

在來是用網路上教的方式安裝都會出現 error 花了很多時間

make -j 會熱當機 要加風扇還是當，有可能是TF卡太慢 (cpu 100%)

用 PuTTY SSH 連到 pi 一但網路連線有問題 "前公盡棄"

make 要花很長的時間 (cpu 28%)

用 Win32DiskImager 備份 8G 就會產生 8G 的檔案, 備份 32G 就會產生 32G 的檔案(也是很花時間)




【Arduino飆機器人暢貨中心】英國原廠原裝進口 樹莓派 Raspberry Pi 3 B
【Arduino飆機器人暢貨中心】500萬像素 Raspberry Pi 3 攝影機模組 CSI Rev 1.3
一般的鍵盤滑鼠
有線網路
HDMI 螢幕 或轉 VGA
32G
2017-11-29-raspbian-stretch.img
用 sh 的方式跑批次檔 (上午九點跑批次檔，到下午五點五十完成)


Raspberry Pi 3 B 產品規格：
SoC：Broadcom BCM2387 chipset
處理器：四核心ARM Cortex-A53、1.2GHz
顯示核心：雙核心VideoCore IV
記憶體：LPDDR2、1GB
網路功能：10/100乙太網路、IEEE802.11 b/g/n無線網路、藍牙4.1（支援一般模式與低功耗模式）
影音輸出：HDMI（支援rev 1.3、1.4）、複合視訊端子（支援NTSC、PAL）、3.5mm音訊端子
USB：4組USB 2.0
GPIO連接功能：40-pin 2.54 mm端子，提供27個GPIO與+3.3 V、+5 V、GND等電力端子。
相機連接功能：15-pin MIPI端子（CSI-2）
顯示器連接功能：Display Serial Interface端子（DSI）
讀卡機：micro SD讀卡機，支援SDIO
作業系統：以micro SD卡開機，支援Linux與Windows 10 IoT
尺寸：85公釐 x 56公釐x 17公釐



sh 檔內容如下 參考自 http://itouchs.blogspot.tw/2017/03/raspberry-pi-install-opencv-3-with.html
---批次檔開始------------------------------     
sudo apt-get install build-essential cmake pkg-config
sudo apt-get install libjpeg-dev libtiff5-dev libjasper-dev libpng12-dev
sudo apt-get install libavcodec-dev libavformat-dev libswscale-dev libv4l-dev
sudo apt-get install libxvidcore-dev libx264-dev
sudo apt-get install libgtk2.0-dev
sudo apt-get install libatlas-base-dev gfortran
sudo apt-get install python2.7-dev python3-dev

cd ~
wget -O opencv.zip https://github.com/Itseez/opencv/archive/3.2.0.zip
chmod 755 opencv.zip
unzip opencv.zip

wget -O opencv_contrib.zip https://github.com/Itseez/opencv_contrib/archive/3.2.0.zip
chmod 755 opencv_contrib.zip
unzip opencv_contrib.zip

wget https://bootstrap.pypa.io/get-pip.py
chmod 755 get-pip.py
sudo python get-pip.py
sudo python3 get-pip.py

pip install numpy

cd ~/opencv-3.2.0
mkdir build
cd build
cmake -D CMAKE_BUILD_TYPE=RELEASE -D CMAKE_INSTALL_PREFIX=/usr/local -D INSTALL_PYTHON_EXAMPLES=ON -D OPENCV_EXTRA_MODULES_PATH=~/opencv_contrib-3.2.0/modules -D BUILD_EXAMPLES=ON ..

make

sudo make install
sudo ldconfig

ls -al /usr/local/lib/python2.7/dist-packages/cv2.so
ls -al /usr/local/lib/python3.4/dist-packages/cv2.cpython-34m.so


---批次檔結束------------------------------

測試 (下指令)
// python2
$ cd
$ python
>>> import cv2
>>> cv2.__version__
'3.2.0'
>>> exit()

// python3
$ cd
$ python3
>>> import cv2
>>> cv2.__version__
'3.2.0'
>>> exit()
---------------------------------


32G TF
7:30 img pi 環境設定
7:50 sh
8:25 make cpu 100% 就當
8:37 從 make -j2 用-j2還是，還是乖乖的 make

16G TF
---重來 網路速度會影響安裝時間(下午網路很慢)
12:55 img (約七分鐘)
環境設定
1:09 sh 這一行會跑很久 pip install numpy
2:10 make

跟記憶卡速度沒什麼關係
要快就 make -j2 當掉重開在 make -j2


-----------------------


en US UTF-8
顯示中文
zh TW EUC-TW
Asia Taipei
TW

--------------------------------------


韓文 3.4
在Raspberry Pi 3中使用opencv_contrib安裝OpenCV 3.4

http://webnautes.tistory.com/916

1.刪除OpenCV 2.4 
如果安裝了OpenCV 2.4版本，則新安裝的OpenCV 3.4版本無法正常工作，應該刪除。













在Raspberry Pi 3中使用opencv_contrib安裝OpenCV 3.4 
2017.12.31 01:15
 
OpenCV 3.4 和opencv_contrib（額外的模塊）被編譯並安裝在Raspberry Pi 3上。

我使用了2017年11月29日發布的Raspbian圖片。
要編譯OpenCV，您必須使用至少16G Micro SD卡。

請考慮一下，我不能應付情況不同的情況，因為我要從最初的Razbian形象來驗證它。

上次更新時間2017.12.30





1.刪除OpenCV 2.4
2.升級現有的已安裝軟件包
3.在編譯OpenCV之前安裝所需的軟件包
4. OpenCV設置，編譯和安裝
5.檢查OpenCV安裝的結果
    5.1。C/C++
    5.2。Python




1.刪除OpenCV 2.4 
如果安裝了OpenCV 2.4版本，則新安裝的OpenCV 3.4版本無法正常工作，應該刪除。




如果你看起來像這樣，你沒有安裝2.4版本的OpenCV。 
您可以繼續下一步。


pi@raspberrypi:~ $ pkg-config --modversion opencv
Package opencv was not found in the pkg-config search path.
Perhaps you should add the directory containing `opencv.pc'
to the PKG_CONFIG_PATH environment variable
No package 'opencv' found



如果安裝了OpenCV 2.4版本，則輸出OpenCV 2.4版本。

pi@raspberrypi:~ $  pkg-config --modversion opencv
2.4.9.1 


您必須使用以下命令刪除現有的OpenCV包（包括OpenCV庫配置文件）並繼續。 

pi@raspberrypi:~ $ sudo apt-get purge  libopencv* python-opencv
pi@raspberrypi:~ $ sudo apt-get autoremove 



2.升級現有的已安裝軟件包
這是在安裝OpenCV 3.3.1之前升級現有的軟件包。 
即使需要很長時間，也是值得推薦的。 

從Raspbian倉庫更新軟件包列表。
如果存儲庫中存在已安裝軟件包的新版本，請運行它以更新列表。 

pi@raspberrypi:~ $ sudo apt-get update


如果現有已安裝軟件包的更新版本升級。

pi@raspberrypi:~ $ sudo apt-get upgrade



3.在編譯OpenCV之前安裝所需的軟件包
一些軟件包已經包含在部署的Raspbian映像中。
我會提到在安裝其他軟件包時需要這些軟件包。 

安裝包含你用來編譯OpenCV的包。 

構建必備軟件包包括諸如C / C ++編譯器，相關庫和make等工具。
編譯選項需要cmake ，或配置OpenCV模塊以包含在構建的庫中。

$ sudo apt-get install build-essential cmake




pkg配置程序是用來檢索所需要從元文件（擴展.PC文件）編譯和鏈接庫中的信息。

使用終端上的特定庫編譯源代碼時，添加必要的編譯器和鏈接器標誌是有幫助的。  

$ sudo apt-get install pkg-config





這些是以特定格式加載或記錄圖像文件所需的軟件包。

$ sudo apt-get install libjpeg-dev libtiff5-dev libjasper-dev libpng12-dev



這些是讀取或寫入特定編解碼器的視頻文件所需的包。

$ sudo apt-get install libavcodec-dev libavformat-dev libswscale-dev libxvidcore-dev libx264-dev libxine2-dev




Video4Linux軟件包包括設備驅動程序和API以支持Linux上的實時視頻捕獲。 

$ sudo apt-get install libv4l-dev v4l-utils



GStreamer是一個視頻流媒體庫。 

$ sudo apt-get install libgstreamer1.0-dev libgstreamer-plugins-base1.0-dev 



在OpenCV中，您可以使用highgui模塊創建自己的窗口來顯示圖像或視頻。 
您可以使用gtk或qt來創建GUI，例如創建窗口。  
在這個例子中，指定了qt4。它不影響QImage和Mat之間的轉換。

$ sudo apt-get install libqt4-dev 


其他可用的包是：
libgtk2.0-dev
libgtk-3-dev
libqt5-dev





這個庫需要支持OpenGL。

$ sudo apt-get install mesa-utils libgl1-mesa-dri libqt4-opengl-dev 


用於OpenCV優化的庫。

$ sudo apt-get install libatlas-base-dev gfortran libeigen3-dev




OpenCV-Python綁定需要python2.7-dev和python3-dev軟件包。 
在OpenCV中使用Numpy是因為它可以處理矩陣操作等等。 

$ sudo apt-get install python2.7-dev python3-dev python-numpy python3-numpy



4. OpenCV設置，編譯和安裝
創建一個臨時目錄來存儲源代碼並繼續前進

pi@raspberrypi:~ $ mkdir opencv
pi@raspberrypi:~ $ cd opencv
pi@raspberrypi:~/opencv $



下載OpenCV 3.4.0源代碼並提取它。


$ wget -O opencv.zip https://github.com/opencv/opencv/archive/3.4.0.zip
$ unzip opencv.zip



opencv_contrib（附加模塊）下載源代碼並解壓。
SIFT，SURF等等。

$ wget -O opencv_contrib.zip https://github.com/opencv/opencv_contrib/archive/3.4.0.zip
$ unzip opencv_contrib.zip



兩個目錄被創建如下： 

pi@raspberrypi:~/opencv $  ls -d */
opencv-3.4.0  opencv_contrib-3.4.0




轉到opencv-3.4.0目錄，創建構建目錄，然後導航到構建目錄。
編譯在build目錄中完成。

pi@raspberrypi:~/opencv $  cd opencv-3.4.0
pi@raspberrypi:~/opencv/opencv-3.4.0 $  mkdir build
pi@raspberrypi:~/opencv/opencv-3.4.0 $  cd build
pi@raspberrypi:~/opencv/opencv-3.4.0/build $  





使用cmake配置OpenCV編譯。複製並粘貼到終端。

cmake -D CMAKE_BUILD_TYPE=RELEASE \
-D CMAKE_INSTALL_PREFIX=/usr/local \
-D WITH_TBB=OFF \
-D WITH_IPP=OFF \
-D WITH_1394=OFF \
-D BUILD_WITH_DEBUG_INFO=OFF \
-D BUILD_DOCS=OFF \
-D INSTALL_C_EXAMPLES=ON \
-D INSTALL_PYTHON_EXAMPLES=ON \
-D BUILD_EXAMPLES=OFF \
-D BUILD_TESTS=OFF \
-D BUILD_PERF_TESTS=OFF \
-D ENABLE_NEON=ON \
-D WITH_QT=ON \
-D WITH_OPENGL=ON \
-D OPENCV_EXTRA_MODULES_PATH=../../opencv_contrib-3.4.0/modules \
-D WITH_V4L=ON  \
-D WITH_FFMPEG=ON \
-D WITH_XINE=ON \
-D BUILD_NEW_PYTHON_SUPPORT=ON \
../





在執行cmake的過程中還有額外的下載，如下所示：

 tiny-dnn: Download: v1.0.0a3.tar.gz

-- xfeatures2d/boostdesc: Download: boostdesc_bgm.i
-- xfeatures2d/boostdesc: Download: boostdesc_bgm_bi.i
-- xfeatures2d/boostdesc: Download: boostdesc_bgm_hd.i
-- xfeatures2d/boostdesc: Download: boostdesc_binboost_064.i
-- xfeatures2d/boostdesc: Download: boostdesc_binboost_128.i
-- xfeatures2d/boostdesc: Download: boostdesc_binboost_256.i
-- xfeatures2d/boostdesc: Download: boostdesc_lbgm.i
-- xfeatures2d/vgg: Download: vgg_generated_48.i
-- xfeatures2d/vgg: Download: vgg_generated_64.i
-- xfeatures2d/vgg: Download: vgg_generated_80.i
-- xfeatures2d/vgg: Download: vgg_generated_120.i







如果您看到以下消息，這是正常的。

-- Configuring done
-- Generating done
-- Build files have been written to: /home/pi/opencv/opencv-3.4.0/build





你設定的結果。

-- General configuration for OpenCV 3.4.0 =====================================
--   Version control:               unknown
--
--   Extra modules:
--     Location (extra):            /home/pi/opencv/opencv_contrib-3.4.0/modules
--     Version control (extra):     unknown
--
--   Platform:
--     Timestamp:                   2017-12-30T12:28:43Z
--     Host:                        Linux 4.9.59-v7+ armv7l
--     CMake:                       3.7.2
--     CMake generator:             Unix Makefiles
--     CMake build tool:            /usr/bin/make
--     Configuration:               RELEASE
--
--   CPU/HW features:
--     Baseline:                    NEON
--       requested:                 DETECT
--       required:                  NEON
--       disabled:                  VFPV3
--
--   C/C++:
--     Built as dynamic libs?:      YES
--     C++11:                       YES
--     C++ Compiler:                /usr/bin/c++  (ver 6.3.0)
--     C++ flags (Release):         -fsigned-char -W -Wall -Werror=return-type -Werror=non-virtual-dtor -Werror=address -Werror=sequence-point -Wformat -Werror=format-security -Wmissing-declarations -Wundef -Winit-self -Wpointer-arith -Wshadow -Wsign-promo -Wuninitialized -Winit-self -Wno-narrowing -Wno-delete-non-virtual-dtor -Wno-comment -fdiagnostics-show-option -pthread -fomit-frame-pointer -ffunction-sections -fdata-sections  -mfpu=neon -mfp16-format=ieee -fvisibility=hidden -fvisibility-inlines-hidden -O3 -DNDEBUG  -DNDEBUG
--     C++ flags (Debug):           -fsigned-char -W -Wall -Werror=return-type -Werror=non-virtual-dtor -Werror=address -Werror=sequence-point -Wformat -Werror=format-security -Wmissing-declarations -Wundef -Winit-self -Wpointer-arith -Wshadow -Wsign-promo -Wuninitialized -Winit-self -Wno-narrowing -Wno-delete-non-virtual-dtor -Wno-comment -fdiagnostics-show-option -pthread -fomit-frame-pointer -ffunction-sections -fdata-sections  -mfpu=neon -mfp16-format=ieee -fvisibility=hidden -fvisibility-inlines-hidden -g  -O0 -DDEBUG -D_DEBUG
--     C Compiler:                  /usr/bin/cc
--     C flags (Release):           -fsigned-char -W -Wall -Werror=return-type -Werror=non-virtual-dtor -Werror=address -Werror=sequence-point -Wformat -Werror=format-security -Wmissing-declarations -Wmissing-prototypes -Wstrict-prototypes -Wundef -Winit-self -Wpointer-arith -Wshadow -Wuninitialized -Winit-self -Wno-narrowing -Wno-comment -fdiagnostics-show-option -pthread -fomit-frame-pointer -ffunction-sections -fdata-sections  -mfpu=neon -mfp16-format=ieee -fvisibility=hidden -O3 -DNDEBUG  -DNDEBUG
--     C flags (Debug):             -fsigned-char -W -Wall -Werror=return-type -Werror=non-virtual-dtor -Werror=address -Werror=sequence-point -Wformat -Werror=format-security -Wmissing-declarations -Wmissing-prototypes -Wstrict-prototypes -Wundef -Winit-self -Wpointer-arith -Wshadow -Wuninitialized -Winit-self -Wno-narrowing -Wno-comment -fdiagnostics-show-option -pthread -fomit-frame-pointer -ffunction-sections -fdata-sections  -mfpu=neon -mfp16-format=ieee -fvisibility=hidden -g  -O0 -DDEBUG -D_DEBUG
--     Linker flags (Release):
--     Linker flags (Debug):
--     ccache:                      NO
--     Precompiled headers:         YES
--     Extra dependencies:          dl m pthread rt /usr/lib/arm-linux-gnueabihf/libGLU.so /usr/lib/arm-linux-gnueabihf/libGL.so
--     3rdparty dependencies:
--
--   OpenCV modules:
--     To be built:                 aruco bgsegm bioinspired calib3d ccalib core datasets dnn dpm face features2d flann fuzzy highgui img_hash imgcodecs imgproc line_descriptor ml objdetect optflow phase_unwrapping photo plot python2 python3 python_bindings_generator reg rgbd saliency shape stereo stitching structured_light superres surface_matching text tracking video videoio videostab xfeatures2d ximgproc xobjdetect xphoto
--     Disabled:                    js world
--     Disabled by dependency:      -
--     Unavailable:                 cnn_3dobj cudaarithm cudabgsegm cudacodec cudafeatures2d cudafilters cudaimgproc cudalegacy cudaobjdetect cudaoptflow cudastereo cudawarping cudev cvv dnn_modern freetype hdf java matlab ovis sfm ts viz
--     Applications:                apps
--     Documentation:               NO
--     Non-free algorithms:         NO
--
--   GUI:
--     QT:                          YES (ver 4.8.7 EDITION = OpenSource)
--       QT OpenGL support:         YES (/usr/lib/arm-linux-gnueabihf/libQtOpenGL.so)
--     GTK+:                        NO
--     OpenGL support:              YES (/usr/lib/arm-linux-gnueabihf/libGLU.so /usr/lib/arm-linux-gnueabihf/libGL.so)
--     VTK support:                 NO
--
--   Media I/O:
--     ZLib:                        /usr/lib/arm-linux-gnueabihf/libz.so (ver 1.2.8)
--     JPEG:                        /usr/lib/arm-linux-gnueabihf/libjpeg.so (ver )
--     WEBP:                        build (ver encoder: 0x020e)
--     PNG:                         /usr/lib/arm-linux-gnueabihf/libpng.so (ver 1.2.54)
--     TIFF:                        /usr/lib/arm-linux-gnueabihf/libtiff.so (ver 42 / 4.0.8)
--     JPEG 2000:                   /usr/lib/arm-linux-gnueabihf/libjasper.so (ver 1.900.1)
--     OpenEXR:                     build (ver 1.7.1)
--
--   Video I/O:
--     FFMPEG:                      YES
--       avcodec:                   YES (ver 57.64.101)
--       avformat:                  YES (ver 57.56.101)
--       avutil:                    YES (ver 55.34.101)
--       swscale:                   YES (ver 4.2.100)
--       avresample:                NO
--     GStreamer:
--       base:                      YES (ver 1.10.4)
--       video:                     YES (ver 1.10.4)
--       app:                       YES (ver 1.10.4)
--       riff:                      YES (ver 1.10.4)
--       pbutils:                   YES (ver 1.10.4)
--     libv4l/libv4l2:              NO
--     v4l/v4l2:                    linux/videodev2.h
--     Xine:                        YES (ver 1.2.6)
--     gPhoto2:                     NO
--
--   Parallel framework:            pthreads
--
--   Trace:                         YES (built-in)
--
--   Other third-party libraries:
--     Lapack:                      NO
--     Eigen:                       YES (ver 3.3.2)
--     Custom HAL:                  YES (carotene (ver 0.0.1))
--
--   NVIDIA CUDA:                   NO
--
--   OpenCL:                        YES (no extra features)
--     Include path:                /home/pi/opencv/opencv-3.4.0/3rdparty/include/opencl/1.2
--     Link libraries:              Dynamic load
--
--   Python 2:
--     Interpreter:                 /usr/bin/python2.7 (ver 2.7.13)
--     Libraries:                   /usr/lib/arm-linux-gnueabihf/libpython2.7.so (ver 2.7.13)
--     numpy:                       /usr/lib/python2.7/dist-packages/numpy/core/include (ver 1.12.1)
--     packages path:               lib/python2.7/dist-packages
--
--   Python 3:
--     Interpreter:                 /usr/bin/python3 (ver 3.5.3)
--     Libraries:                   /usr/lib/arm-linux-gnueabihf/libpython3.5m.so (ver 3.5.3)
--     numpy:                       /usr/lib/python3/dist-packages/numpy/core/include (ver 1.12.1)
--     packages path:               lib/python3.5/dist-packages
--
--   Python (for build):            /usr/bin/python2.7
--
--   Java:
--     ant:                         NO
--     JNI:                         NO
--     Java wrappers:               NO
--     Java tests:                  NO
--
--   Matlab:                        NO
--
--   Install to:                    /usr/local
-- -----------------------------------------------------------------
--
-- Configuring done
-- Generating done
-- Build files have been written to: /home/pi/opencv/opencv-3.4.0/build





如果你沒有看到像這樣的Python 2或Python 3庫條目

--   Python 2:
--     Interpreter:                 /usr/bin/python2.7 (ver 2.7.13)
--     Libraries:                   /usr/lib/arm-linux-gnueabihf/libpython2.7.so (ver 2.7.13)
--     numpy:                       /usr/lib/python2.7/dist-packages/numpy/core/include (ver 1.12.1)
--     packages path:               lib/python2.7/dist-packages
--
--   Python 3:
--     Interpreter:                 /usr/bin/python3 (ver 3.5.3)
--     Libraries:                   /usr/lib/arm-linux-gnueabihf/libpython3.5m.so (ver 3.5.3)
--     numpy:                       /usr/lib/python3/dist-packages/numpy/core/include (ver 1.12.1)
--     packages path:               lib/python3.5/dist-packages
--
--   Python (for build):            /usr/bin/python2.7



你將不得不自己寫下路徑，就像下一條紅線。 

$ cmake -D CMAKE_BUILD_TYPE=RELEASE \
-D CMAKE_INSTALL_PREFIX=/usr/local \
-D WITH_TBB=OFF \
-D WITH_IPP=OFF \
-D WITH_1394=OFF \
-D BUILD_WITH_DEBUG_INFO=OFF \
-D BUILD_DOCS=OFF \
-D INSTALL_C_EXAMPLES=ON \
-D INSTALL_PYTHON_EXAMPLES=ON \
-D BUILD_EXAMPLES=OFF \
-D BUILD_TESTS=OFF \
-D BUILD_PERF_TESTS=OFF \
-D ENABLE_NEON=ON \
-D WITH_QT=ON \
-D WITH_OPENGL=ON \
-D OPENCV_EXTRA_MODULES_PATH=../../opencv_contrib-3.4.0/modules \
-D WITH_V4L=ON  \
-D WITH_FFMPEG=ON \
-D WITH_XINE=ON \
-D BUILD_NEW_PYTHON_SUPPORT=ON \
-D PYTHON2_INCLUDE_DIR=/usr/include/python2.7 \
-D PYTHON2_NUMPY_INCLUDE_DIRS=/usr/lib/python2.7/dist-packages/numpy/core/include/ \
-D PYTHON2_PACKAGES_PATH=/usr/lib/python2.7/dist-packages \
-D PYTHON2_LIBRARY= /usr/lib/arm-linux-gnueabihf/libpython2.7.so \
-D PYTHON3_INCLUDE_DIR=/usr/include/python3.5m \
-D PYTHON3_NUMPY_INCLUDE_DIRS=/usr/lib/python3/dist-packages/numpy/core/include/ \
-D PYTHON3_PACKAGES_PATH=/usr/lib/python3.5/dist-packages \
-D PYTHON3_LIBRARY=/usr/lib/arm-linux-gnueabihf/libpython3.5m.so \
../


使用make命令開始編譯。
不要使用-j4選項，因為它可能會導致錯誤。

pi@raspberrypi:~/opencv/opencv-3.4.0/build $ time make



用時間命令編譯測量的時間。花了大約2小時40分鐘。

圖片

現在安裝編譯的結果。

pi@raspberrypi:~/opencv/opencv-3.4.0/build $ sudo make install

示例代碼被複製到/ usr / local / share / OpenCV / samples /。

圖片


檢查/etc/ld.so.conf.d/目錄以查找包含/ usr / local / lib 的配置文件。

pi@raspberrypi:~/opencv/opencv-3.4.0/build $ cat /etc/ld.so.conf.d/*
/opt/vc/lib
# Multiarch support
/lib/arm-linux-gnueabihf
/usr/lib/arm-linux-gnueabihf
/usr/lib/arm-linux-gnueabihf/libfakeroot
# libc default configuration
/usr/local/lib


如果/ usr / local / lib 不能打印，請運行以下命令：

pi@raspberrypi:~/opencv/opencv-3.4.0/build $ sudo sh -c 'echo '/usr/local/lib' > /etc/ld.so.conf.d/opencv.conf'


如果您發現/ usr / local / lib，或者您沒有完成任何工作，請在編譯時運行以下命令以查找opencv庫：

pi@raspberrypi:~/opencv/opencv-3.4.0/build $ sudo ldconfig



5.檢查OpenCV安裝的結果 
5.1。C / C ++
檢查OpenCV庫是否適用於C / C ++。
如果沒有問題，則輸出已安裝的OpenCV庫的版本。

pi@raspberrypi:~/opencv/opencv-3.4.0/build $  pkg-config --modversion opencv
3.4.0



如果你找不到如下所示的opencv ，你需要做一些額外的工作。

pi@raspberrypi:~/opencv/opencv-3.4.0/build $  pkg-config --modversion opencv
Package opencv was not found in the pkg-config search path.
Perhaps you should add the directory containing `opencv.pc'
to the PKG_CONFIG_PATH environment variable
No package 'opencv' found




pkg-config命令應該能夠在路徑/ usr / local / lib / pkgconfig中找到opencv.pc文件。 

$ sudo sh -c 'echo PKG_CONFIG_PATH=$PKG_CONFIG_PATH:/usr/local/lib/pkgconfig >> /etc/bash.bashrc'
$ sudo sh -c 'echo export PKG_CONFIG_PATH >> /etc/bash.bashrc'



簽出並登錄。
再次選中時，應列出OpenCV版本。

pi@raspberrypi:~/opencv/opencv-3.4.0/build $ pkg-config --modversion opencv
3.4.0


pkg-config --libs --cflags 當你運行opencv 命令時，它看起來像這樣：

圖片


我們來看一個示例代碼並編譯它。

$ cp /usr/local/share/OpenCV/samples/cpp/facedetect.cpp ./



首先將需要測試的攝像頭連接到Raspberry Pi。
大多數攝像頭在dmesg | 之後連接 如果使用tail 命令檢查網絡攝像機，它將被識別為如下所示。
如果沒有，則需要安裝攝像頭的設備驅動程序。



圖片



驗證是否已創建/ dev / video0 設備文件。


圖片


現在編譯並運行它。

$ g++ -o facedetect facedetect.cpp $(pkg-config --libs --cflags opencv)  
$ ./facedetect --cascade="/usr/local/share/OpenCV/haarcascades/haarcascade_frontalface_alt.xml" --nested-cascade="/usr/local/share/OpenCV/haarcascades/haarcascade_eye_tree_eyeglasses.xml " --scale=1.3



如果您使用MobaXterm作為終端程序，您可以在SSH連接後立即檢查執行結果。
（速度很慢）

https://mobaxterm.mobatek.net/ 

顯示檢測時間並且可以獲得檢測照相機圖像上的臉部的結果。




5.2。Python
檢查opencv庫是否在python 2.x和python 3x中可用，如下所示：
應輸出每個版本的OpenCV。

pi@raspberrypi:~/opencv/opencv-3.4.0/build $ python
Python 2.7.13 (default, Nov 24 2017, 17:33:09)
[GCC 6.3.0 20170516] on linux2
Type "help", "copyright", "credits" or "license" for more information.
>>> import cv2
>>> cv2.__version__
'3.4.0'
>>>
pi@raspberrypi:~/opencv/opencv-3.4.0/build $ python3
Python 3.5.3 (default, Jan 19 2017, 14:11:04)
[GCC 6.3.0 20170124] on linux
Type "help", "copyright", "credits" or "license" for more information.
>>> import cv2
>>> cv2.__version__
'3.4.0'
>>>


嘗試運行示例代碼。

$ python /usr/local/share/OpenCV/samples/python/facedetect.py --cascade "/usr/local/share/OpenCV/haarcascades/haarcascade_frontalface_alt.xml" --nested-cascade "/usr/local/share/OpenCV/haarcascades/haarcascade_eye_tree_eyeglasses.xml" /dev/video0

$ python3 /usr/local/share/OpenCV/samples/python/facedetect.py --cascade "/usr/local/share/OpenCV/haarcascades/haarcascade_frontalface_alt.xml" --nested-cascade "/usr/local/share/OpenCV/haarcascades/haarcascade_eye_tree_eyeglasses.xml" /dev/video0


您可以在相機圖像上獲得人臉檢測的結果。

現在刪除用於缺少編譯的opencv源代碼目錄。

pi@raspberrypi:~/opencv/opencv-3.4.0/build $ cd
pi@raspberrypi:~ $ rm -rf opencv




http://storychen.blogspot.tw/2016/06/raspberry-pi-3-opencv.html
